import 'package:LittleBuddy/views/directions_repository.dart';
import 'package:LittleBuddy/views/home.dart';
import 'package:flutter/material.dart';
import 'package:flutter_polyline_points/flutter_polyline_points.dart';

import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:quickalert/models/quickalert_type.dart';
import 'package:quickalert/widgets/quickalert_dialog.dart';
import 'package:google_directions_api/google_directions_api.dart';

// GPS
import 'package:geolocator/geolocator.dart';

import 'direction_model.dart';

class Mapnaja extends StatefulWidget {
  const Mapnaja({super.key});

  @override
  State<Mapnaja> createState() => _MapnajaState();
}

class _MapnajaState extends State<Mapnaja> {
  // ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  void showAlert() {
    QuickAlert.show(
        context: context,
        title: "‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏ö‡πà‡∏ó‡∏≥üòÖ",
        type: QuickAlertType.error);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Clinic"),
        centerTitle: true,
        leading: IconButton(
          onPressed: () {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (context) => Home()),
            );
          },
          icon: Icon(Icons.arrow_back),
        ),
        actions: [
          IconButton(
            onPressed: () {
              showAlert();
            },
            icon: Icon(Icons.check),
          ),
        ],
      ),
      body: const MapScreen(),
    );
  }
}

class MapScreen extends StatefulWidget {
  const MapScreen({super.key});

  @override
  State<MapScreen> createState() => _MapScreenState();
}

class _MapScreenState extends State<MapScreen> {
  // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  static const _initialCameraPosition =
      CameraPosition(target: LatLng(13.8243766, 100.5160947), zoom: 15);

  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÑ‡∏ß‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏ô‡πâ‡∏≤ goolemap
  late GoogleMapController _googleMapController;

  @override
  void dispose() {
    _googleMapController.dispose();
    super.dispose();
  }

  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö Marker
  Set<Marker> _markers = {};
  var shopdata = [
    [13.8232031, 100.506575],
    [13.8242144, 100.515139],
    [13.8031571, 100.5395366]
  ];

  late LatLng MainLocation;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á mark ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  void addMark() {
    setState(() {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° Marker ‡πÉ‡∏ô _markers
      for (var i = 0; i < shopdata.length; i++) {
        _markers.add(Marker(
          markerId: MarkerId("marker ${i}"),
          position: LatLng(shopdata[i][0], shopdata[i][1]),
          infoWindow: InfoWindow(
            title: "‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ${i + 1}",
            snippet: "‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏î‡∏µ‡∏ô‡∏∞",
          ),
        ));
      }
    });
  }

  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î user
  Position? _position;

  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
  Directions? _info;
  Marker? _origin;
  Marker? _destination;

  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ route
  bool st = false;

  // ‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î latitude, longitude
  void _getCurrentLocation() async {
    Position position = await _determinePosition(); // ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    setState(() {
      _position = position;
    });
  }

  // ‡∏¢‡πâ‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á mark ‡∏ô‡∏±‡πâ‡∏ô‡πÜ
  CameraPosition _getShopLocation(index) {
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ _destination (‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á)
    setState(() {
      _origin = Marker(
        markerId: MarkerId("You"),
        position: MainLocation,
      );
      for (var marker in _markers) {
        if (marker.markerId == MarkerId("marker ${index}")) {
          _destination = marker;
          break;
        }
      }
    });

    return CameraPosition(
        target: LatLng(shopdata[index][0], shopdata[index][1]), zoom: 15);
  }

  void _route() async {
    final diarections = await DirectionsRepositoey().getDirections(
        origin: _origin!.position, destination: _destination!.position);
    setState(() => _info = diarections);
    st = !st;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
  Future<Position> _determinePosition() async {
    LocationPermission permission;

    permission = await Geolocator.checkPermission();

    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        return Future.error('Location Permission are denied');
      }
    }
    return await Geolocator.getCurrentPosition();
  }

  @override
  Widget build(BuildContext context) {
    if (_position == null) {
      _getCurrentLocation();
      addMark();
    } else {
      MainLocation = LatLng(_position!.latitude, _position!.longitude);
    }
    return Scaffold(
      // ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ ‡∏à‡∏±‡∏î‡πÅ‡∏≠‡∏û
      body: Column(
        // ‡πÅ‡∏ö‡πà‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏™‡πà‡∏ß‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Column
        children: [
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏°‡∏≤ ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á map
          Padding(
            padding: const EdgeInsets.all(10.0),
            child: Container(
              // ‡∏ö‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏•‡πà‡∏≠‡∏á
              decoration: BoxDecoration(color: Colors.green),
              height: MediaQuery.of(context).size.height *
                  0.4, // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á Container ‡πÄ‡∏õ‡πá‡∏ô 40% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
              child: _position != null
                  ?
                  // Text("CurrentLocation : "+ _position.toString())
                  Stack(
                      alignment: Alignment.center,
                      children: [
                        GoogleMap(
                          initialCameraPosition: _initialCameraPosition,
                          myLocationEnabled: true,
                          myLocationButtonEnabled: true,
                          onMapCreated: (controller) =>
                              _googleMapController = controller,
                          markers: _markers, // markers
                         polylines: {
                          if (_info != null)
                            Polyline(
                              polylineId: const PolylineId('overview_polyline'),
                              color: Colors.blue,
                              width: 5,
                              points: _info!.polylinePoints.map((e) => LatLng(e.latitude, e.longitude)).toList(),
                            )
                         },
                        ),
                        if (_info != null)
                          Positioned(
                            top: 20,
                            child: Container(
                                padding: const EdgeInsets.symmetric(
                                    vertical: 6.0, horizontal: 12.0),
                                decoration: BoxDecoration(
                                    color: Colors.blueAccent,
                                    boxShadow: const [
                                      BoxShadow(
                                        color: Colors.white,
                                        offset: Offset(0, 2),
                                        blurRadius: 6.0,
                                      )
                                    ]),
                                child: Text(
                                  "${_info!.totalDistance},${_info!.totalDuration}",
                                  style: const TextStyle(
                                      fontSize: 15,
                                      fontWeight: FontWeight.w500),
                                )),
                          )
                      ],
                    )
                  : Text(
                      "                                                Loading                                                "),
            ),
          ),
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏°‡∏≤ ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á ‡πÄ‡∏°‡∏ô‡∏π
          Container(
            // ‡∏ö‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏•‡πà‡∏≠‡∏á
            decoration: BoxDecoration(
                //color: Color.fromARGB(255, 167, 196, 219),
                borderRadius: BorderRadius.circular(20)),
            height: MediaQuery.of(context).size.height *
                0.42, // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á Container ‡πÄ‡∏õ‡πá‡∏ô 42% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
            child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: ListView.builder(
                    itemCount: shopdata.length, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á
                    itemBuilder: (BuildContext context, int index) {
                      return Padding(
                        padding: const EdgeInsets.all(5.0),
                        child: Container(
                          // ‡∏Å‡∏£‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                          decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(5),
                              color: Color.fromARGB(255, 192, 247,
                                  248) // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á Container ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                              ),
                          // ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÉ‡∏ô
                          child: ListTile(

                              // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏´‡∏•‡∏±‡∏Å
                              title: Text(
                                "‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ${index + 1}",
                                style: TextStyle(fontSize: 25),
                              ),
                              // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏£‡∏≠‡∏á
                              subtitle: Text("‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏î‡∏µ‡∏ô‡∏∞"),
                              // ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô
                              onTap: () {
                                _googleMapController.animateCamera(
                                    CameraUpdate.newCameraPosition(
                                        _getShopLocation(index)));
                                _route();
                                print("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ${index + 1}");
                              }),
                        ),
                      );
                    })),
          ),
        ],
      ),

      // ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏≠‡∏¢ ‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á ‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
      floatingActionButton: FloatingActionButton(
        backgroundColor: Theme.of(context).primaryColor,
        onPressed: () {
          _googleMapController.animateCamera(_info != null
              ? CameraUpdate.newLatLngBounds(_info!.bounds, 100.00)
              : CameraUpdate.newCameraPosition(_initialCameraPosition));
        },
        tooltip: 'My Location',
        child: Icon(Icons.filter_center_focus),
      ),
    );
  }
}

// ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• list
List<Widget> getData(int count) {
  List<Widget> DataMarker = [];
  for (var i = 0; i < count; i++) {
    // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ txt ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô list
    var txt = Text(
      "‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ${i + 1}",
      style: TextStyle(fontSize: 25),
    );
    // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ txt2 ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô list ‡πÅ‡∏ö‡∏ö listtile
    var txt2 = ListTile(
      title: Text(
        "‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ${i + 1}",
        style: TextStyle(fontSize: 25),
      ),
      subtitle: Text("‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏î‡∏µ‡∏ô‡∏∞"),
    );
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô list
    DataMarker.add(txt2);
  }
  return DataMarker;
}
